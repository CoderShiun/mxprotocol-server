// $ go get -v -d gitlab.com/pantomath-io/demo-grpc
// $ cd $GOPATH/src/gitlab.com/pantomath-io/demo-grpc
// used tutorial: https://medium.com/pantomath/how-we-use-grpc-to-build-a-client-server-system-in-go-dd20045fa1c2

// $ protoc --go_out=plugins=grpc:. *.proto  // => to make a go file from it


// time format


syntax = "proto3";
package grpc_api;


service Payment {
    rpc TokenTxReq (TxReqType) returns (TxReqReplyType) {}
    rpc CheckTxStatus (CheckTxStatusType) returns (CheckTxStatusReplyType) {}
}


message TxReqType {
    enum PaymentClient {
        TEST = 0;
        REGCOIN = 1;
        AIRDROP = 2;
        M2MWALLET = 3;        
    }
    PaymentClient PaymentClientEnum = 1;
    int64 ReqIdClient = 2;
    string ReceiverAdr = 3;
    string Amount = 4;
    enum TokenName {
        MXC = 0;
        FAKEMXC1 = 1;
        FAKEMXC2 = 2;        
    }
    
    TokenName TokenNameEnum = 5;    
}

message TxReqReplyType{
    string Error = 1;
    int64 ReqQueryRef = 2; // primary key of the query in payment service DB
}


message CheckTxStatusType {
    int64 ReqQueryRef = 1;
}

message CheckTxStatusReplyType {
    string Error = 1;

    enum TxPaymentStatus {
        TOBE_SENT = 0;
        TOBE_CHECKED = 1; // tx is sent, still not sure if it was successful
        SUCCESSFUL = 2;
    }

    TxPaymentStatus TxPaymentStatusEnum = 2;
    string TxHash = 3;
    string TxSentTime = 4;
    string TxNetworkStatusCheckTime = 5;
}

