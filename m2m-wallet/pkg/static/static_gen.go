// Code generated by go-bindata.
// sources:
// ../../statics/statics.go
// ../../statics/swagger/api.swagger.json
// ../../statics/swagger/withdraw.swagger.json
// DO NOT EDIT!

package static

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\x28\x2e\x49\x2c\xc9\x4c\x2e\xe6\x02\x04\x00\x00\xff\xff\x63\xb1\xc3\xb3\x10\x00\x00\x00")

func staticsGoBytes() ([]byte, error) {
	return bindataRead(
		_staticsGo,
		"statics.go",
	)
}

func staticsGo() (*asset, error) {
	bytes, err := staticsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "statics.go", size: 16, mode: os.FileMode(436), modTime: time.Unix(1561036221, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerApiSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\xcf\x8a\xdb\x3c\x14\xc5\xf7\xdf\x53\x88\xf3\x75\x29\x92\x34\x4b\xed\x86\x21\x2d\xb3\x18\x18\x66\x0a\x5d\x94\x2c\x14\xf9\xda\xd1\x60\x4b\xea\x95\x34\x21\x84\xbc\x7b\xb9\xb6\x03\x49\xfa\x67\x65\x2c\xdd\x73\x74\xce\x4f\x3a\x21\x1f\x6c\xd7\x11\xc3\x60\xbd\x58\x41\x63\x67\x33\xbd\xd8\xb2\x87\x01\x34\x7c\x68\x23\xcc\x09\xc5\x97\x9e\x60\xf0\xbc\x7e\x56\x07\xdb\xf7\x54\xd4\xeb\xe6\xed\x9b\x7a\x78\x79\x82\xc6\x07\x71\xf6\x31\xc0\xe0\xf3\x62\x35\xba\x34\x94\x1d\xfb\x54\xa6\x55\x9c\x35\xb2\xdb\xd3\x40\x19\x26\xd4\xbe\xd7\x70\x31\xe4\x3a\xfe\xff\x80\x4d\xa9\xf7\xce\xca\xf0\xf2\x3d\xc7\x80\xad\x46\xe2\xd8\x54\xf7\x8f\x7d\x5b\xf6\x59\x92\x2d\x6d\xf2\xcb\x8e\xca\x77\x5f\xf6\x0d\xdb\xc3\x17\xa2\xe5\xc9\xf1\x31\x95\xf8\x58\x99\x29\xb8\xe3\x59\xe6\x3a\x2a\xf2\x89\x89\x78\x74\x7a\x6a\x60\xf0\xf5\x46\x07\xb1\x65\x3b\x50\x21\x96\x83\x4f\x77\x35\xca\x31\x91\x8a\xad\x9a\xdc\x95\x9b\xed\xa1\x41\xa1\x0e\x92\x74\x53\xf6\xc4\x12\xcf\xcb\xbc\x64\x84\x46\xb0\x83\xa0\xbb\xcd\x04\x0d\xa6\x9f\xd5\x33\x35\x30\x85\x2b\xe9\xd1\x1e\x06\xb9\xb0\x0f\x1d\xce\x5b\x99\xc8\x29\x86\x4c\x63\xd1\xf5\x6a\x25\x9f\xdb\x48\x0f\x2a\x57\xe7\x28\xe7\xb6\xf6\xea\x32\xbe\xc0\x8c\xdb\x8a\xe0\x13\x53\x0b\x83\xff\x97\x0d\xb5\x3e\x78\x11\x66\x81\x76\xdb\xfd\x75\xd6\xe2\x7c\x96\xcb\xaa\xc3\x60\xf9\x38\x11\x52\x8d\x2d\x56\xb5\x91\xe7\xc6\x45\x1d\x66\x9d\x6a\x47\x68\xc5\x76\xe3\x3d\x5d\xec\xde\x88\x3f\xbc\x23\x6c\x47\xaf\xab\x63\x25\x8e\x4d\xfe\xf1\x9a\x84\x9f\xda\x35\xd4\xda\xda\x17\x98\x99\xe1\x1f\x98\xde\xf1\xd1\xf8\x7b\x09\x73\x92\x07\x94\x88\xcb\x6c\xbf\x61\x8e\x3c\x3e\xe4\x7b\x93\xeb\xfb\xff\x0d\xef\x65\x53\xc5\xdd\x3b\xb9\x22\x60\xdb\xc8\x83\x95\x9c\x4d\xac\xbb\x7e\xac\x3f\x59\x86\x3a\xec\x88\x21\x95\xe7\x95\x49\x24\x44\xff\xfb\x15\x00\x00\xff\xff\xc1\x1f\x0b\x74\x68\x03\x00\x00")

func swaggerApiSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerApiSwaggerJson,
		"swagger/api.swagger.json",
	)
}

func swaggerApiSwaggerJson() (*asset, error) {
	bytes, err := swaggerApiSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/api.swagger.json", size: 872, mode: os.FileMode(436), modTime: time.Unix(1561037091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _swaggerWithdrawSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8e\xdb\x20\x10\xbd\xfb\x2b\x46\xb4\xc7\x2a\x59\xed\x31\xb7\x6a\xb5\xad\x7a\x6d\x0f\x3d\x54\x39\x10\x3c\x76\x58\xc5\x40\x87\x61\xa3\x68\xe5\x7f\xaf\xc0\x76\x0c\x24\x91\x9a\x93\x03\x6f\x1e\xf3\xde\x9b\xf9\x68\x00\x84\x3f\xcb\xbe\x47\x12\x3b\x10\xcf\x9b\x27\xf1\x25\x9e\x69\xd3\x59\xb1\x83\x78\x0f\x20\x58\xf3\x09\xe3\xfd\x59\xf3\xb1\x25\x79\xde\x38\xb2\x6c\x13\x14\x40\xbc\x23\x79\x6d\x4d\x04\xcc\x9f\x60\x2c\x83\x47\x16\x0d\xc0\x98\x08\xbd\x3a\xe2\x80\x5e\xec\xe0\xcf\x54\x74\x64\x76\x0b\x41\xfc\xf6\x11\xbb\x4f\x58\x65\x8d\x0f\x05\x58\x3a\x77\xd2\x4a\xb2\xb6\x66\xfb\xe6\xad\x59\xb1\x8e\x6c\x1b\xd4\x7f\x62\x25\x1f\xfd\xaa\x6a\x2b\x9d\xde\xf6\xc8\xbf\x67\x51\xdf\x10\xb7\x1f\x8a\x2e\x8e\xed\x4b\x20\x42\xa3\x2e\xe3\x15\x0d\x20\x7a\xe4\xec\x6f\xd4\x14\x86\x41\xd2\x25\xea\xfe\x8e\x0c\xad\x64\x09\x9d\x25\x50\xa9\x9a\x61\x71\x0b\x3a\xc4\x59\x6a\xaa\xb3\x0e\x29\xf5\xf7\xa3\x9d\x6b\xb3\x16\x72\x20\xa1\x77\xd6\x78\xf4\xc5\xbb\x00\xe2\xf9\xe9\xa9\x3a\x02\x10\x2d\x7a\x45\xda\xf1\x1c\xc5\x57\xf0\x41\x29\xf4\xbe\x0b\x27\x58\x98\x36\x19\xfd\xa4\x21\xe6\x22\x6f\xc8\x00\xc4\x67\xc2\x2e\xf2\x7c\xda\xb6\xd8\x69\xa3\x23\xaf\x8f\x9e\x95\xfd\xfe\x9c\x99\x45\x51\x3f\x36\xf7\xbe\xc7\x4c\x9b\x93\x24\x07\x64\xa4\x35\xba\xe9\x57\xa9\x32\x72\x48\xa3\x57\x06\x53\xcb\xa8\xb4\xf3\xc5\x21\xd8\x0e\xa6\xa2\x39\x90\xdb\x2a\x9d\xc0\x71\x2c\xea\x1b\xc2\xbf\x41\x13\xc6\x7c\x98\x02\x56\xb7\x91\x3e\x56\x7a\x26\x6d\xfa\xba\x16\x4d\x18\x2a\x4d\xe9\xfc\x95\x8f\x48\xa5\x4d\xfb\xbb\x36\xed\x33\x9b\x58\xf6\xb5\x41\x62\x71\xff\x17\xd2\xbb\x56\x99\xf3\x0b\xdd\x44\x35\x5e\x97\x2f\x0b\x70\x1d\x7f\xe9\xf4\x4b\xee\xa9\x2e\xc6\xec\x91\xc6\x5b\x75\xa5\xae\x6b\xef\xf1\x51\x19\x4e\x71\x65\x72\xc4\x3c\x02\xe2\xf1\x1c\xdd\xe9\xc1\x1e\xde\x50\xf1\xda\x83\xa3\xb8\x42\xac\xab\xc5\x10\xf9\x1a\x55\x1b\xb3\x50\x99\x30\x1c\x90\x8a\xc8\x44\x67\x69\x90\xa9\xd1\xd6\x86\xc3\x09\xcb\xdb\x6a\xb4\x96\x37\x60\x6a\x6a\x23\xee\x4e\xf7\x2b\x91\xa5\x47\x3d\xcc\x96\x36\x75\xf2\x59\x6c\xcd\xd8\xfc\x0b\x00\x00\xff\xff\x7b\xd6\xd1\xca\x9c\x05\x00\x00")

func swaggerWithdrawSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_swaggerWithdrawSwaggerJson,
		"swagger/withdraw.swagger.json",
	)
}

func swaggerWithdrawSwaggerJson() (*asset, error) {
	bytes, err := swaggerWithdrawSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "swagger/withdraw.swagger.json", size: 1436, mode: os.FileMode(436), modTime: time.Unix(1561037091, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"statics.go": staticsGo,
	"swagger/api.swagger.json": swaggerApiSwaggerJson,
	"swagger/withdraw.swagger.json": swaggerWithdrawSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"statics.go": &bintree{staticsGo, map[string]*bintree{}},
	"swagger": &bintree{nil, map[string]*bintree{
		"api.swagger.json": &bintree{swaggerApiSwaggerJson, map[string]*bintree{}},
		"withdraw.swagger.json": &bintree{swaggerWithdrawSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

